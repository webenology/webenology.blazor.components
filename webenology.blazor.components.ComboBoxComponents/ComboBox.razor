@namespace webenology.blazor.components.ComboBoxComponents
@typeparam TItem

@using Microsoft.AspNetCore.Components.Web.Virtualization
@using webenology.blazor.components.shared

<div class="@CssStyle.ContainerCss">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@CssStyle.LabelCss">@Label</label>
    }

    <OutsideClick OnOutsideClick="OnEnter">
        <div class="@CssStyle.InputGroupCss">
            <input placeholder="@PlaceHolder" type="text" @attributes="@_attributes" class="@InputCss()" @bind="LocalText"
                   @bind:event="oninput" @onkeyup="onKeyPress" @onclick="openItemsWindow" @ref="_elRef" readonly="@Readonly"/>
            @if (ShowRemoveButton && !string.IsNullOrEmpty(_localText) && !Readonly)
            {
                <div class="@CssStyle.RemoveIconContainerCss">
                    <i class="@CssStyle.RemoveIconCss" @onclick="clearItem"></i>
                </div>
            }
            <div class="@CssStyle.ChevronContainerCss" @onclick="toggleItemsWindows">
                <i class="@CssStyle.ChevronIconCss"></i>
            </div>
        </div>
        @if (_isError)
        {
            <label class="@CssStyle.ErrorCss">
                @_errorMessage
            </label>
        }
        <div class="@ListGroupCss()" style="top: calc(100%@(_isError ? " - 24px" : ""));">
            <div style="max-height: @(Math.Clamp(MaxItemsToShow * ItemHeight, ItemHeight * 4, ItemHeight * 8))px; overflow-y: auto" @ref="_scrollEl">
                <Virtualize TItem="TItem" Items="SearchedItems" @ref="_virtualized" OverscanCount="3" Context="itm">
                    @if (SearchedItems.Count == 1)
                    {
                        _currentFocused = 0;
                    }
                    else if (SelectedItem != null)
                    {
                        _currentFocused = SearchedItems.IndexOf(SelectedItem);
                    }

                    <span class="@ListGroupItemCss(_currentFocused == SearchedItems.IndexOf(itm))" @onclick="@(() => onSelectItem(itm))" style="height: @($"{GetHeight()}px");">@((MarkupString)GetValue(itm).Highlight(_localText))</span>
                </Virtualize>
            </div>
            @if (!SearchedItems.Any())
            {
                <div class="@CssStyle.ItemNotFoundCss">
                    No Matches Found
                </div>
            }
            @if (CanAddNewItem && !ExactMatch())
            {
                <div class="@CssStyle.AddNewContainerCss" @onclick="onAddNewItem">
                    <i class="@CssStyle.AddNewIconCss"></i>
                    <b>Ctrl + Enter</b> to create @(string.IsNullOrEmpty(_localText) ? "a" : $"\"{_localText}\" as a") new @(string.IsNullOrEmpty(NewTypeName) ? "item" : NewTypeName)
                </div>
            }
        </div>
    </OutsideClick>
</div>